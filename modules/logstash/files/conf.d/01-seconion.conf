### Various filters for accepting BRO logs from IDS of choice###
### Most of these were stolen from smart people on GitHub###
### Renamed fields and such to fit environment###

### BRO CONN ###
filter {
  if "bro_conn" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","service","duration","original_bytes","respond_bytes","connection_state","local_orig","local_respond","missed_bytes","history","original_packets","original_ipbytes","respond_packets","respond_ipbytes","tunnel_parents","original_country_code","respond_country_code","sensor_name"]
      separator => "	"
    }
    translate {
      field => "connection_state"

      destination => "connection_state_description"

      dictionary => [
                    "S0", "Connection attempt seen, no reply",
                    "S1", "Connection established, not terminated",
                    "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
                    "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
                    "SF", "Normal SYN/FIN completion",
                    "REJ", "Connection attempt rejected",
                    "RSTO", "Connection established, originator aborted (sent a RST)",
                    "RSTR", "Established, responder aborted",
                    "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
                    "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
                    "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
		    "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
                    "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)"
                    ]
    }
  }
}

#### BRO DHCP ####
filter {
  if "bro_dhcp" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<uid>(.*?))\t(?<source_ip>(.*?))\t(?<source_port>(.*?))\t(?<destination_ip>(.*?))\t(?<destination_port>(.*?))\t(?<mac>(.*?))\t(?<assigned_ip>(.*?))\t(?<lease_time>(.*?))\t(?<transaction_id>(.*))" ]
    }
  }
}

### BRO DNS ###
filter {
  if "bro_dns" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","transaction_id","rtt","query","query_class","query_class_name","query_type","query_type_name","rcode","rcode_name","aa","tc","rd","ra","z","answers","ttls","rejected"]
      separator => "	"
    }
    mutate {
		  add_tag => [ "dns" ]
	  }
    if [ttls] == "-" {
      mutate {
        remove_field => [ "ttls" ]
      }
    } else {
      mutate {
        convert => [ "ttls", "float" ]
      }
    }
  }
}

### BRO DPD ###
filter {
  if "bro_dpd" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","analyzer","failure_reason"]
      separator => "	"
      skip_empty_columns => true
    }
  }	
}

### BRO FILES ###
filter {
  if "bro_files" in [tags] {
    csv {
      columns => ["timestamp","fuid","file_ip","destination_ip","connection_uids","source","depth","analyzer","mimetype","file_name","duration","rig","is_orig","seen_bytes","total_bytes","missing_bytes","overflow_bytes","timed_out","fuid","md5","sha1","sha256","extracted"]
      separator => "	"
      skip_empty_columns => true
    }
  }
}

### BRO FTP ###
filter {
  if "bro_ftp" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","ftp_username","password","ftp_command","ftp_argument","mimetype","file_size","reply_code","reply_message","data_channel_passive","data_channel_source_ip","data_channel_destination_ip","data_channel_destination_port","fuid"]
      separator => "	"
      skip_empty_columns => true
    }
  }	
}

### BRO HTTP ###
filter {
  if "bro_http" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<uid>(.*?))\t(?<source_ip>(.*?))\t(?<source_port>(.*?))\t(?<destination_ip>(.*?))\t(?<destination_port>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<virtual_host>(.*?))\t(?<uri>(.*?))\t(?<referrer>(.*?))\t(?<version>(.*?))\t(?<useragent>(.*?))\t(?<request_body_length>(.*?))\t(?<response_body_length>(.*?))\t(?<status_code>(.*?))\t(?<status_message>(.*?))\t(?<info_code>(.*?))\t(?<info_message>(.*?))\t(?<tags>(.*))\t(?<user>(.*))\t(?<password>(.*))\t(?<proxied>(.*))\t(?<orig_fuids>(.*))\t(?<orig_filenames>(.*?))\t(?<orig_mime_types>(.*))\t(?<resp_fuids>(.*))\t(?<resp_filenames>(.*?))\t(?<resp_mime_types>(.*))" ]
    }
    if [useragent] == "-" {
      mutate {
        remove_field => [ "useragent" ]
      }
    }
  }
}

### BRO IRC ###
filter {
  if "bro_irc" in [tags] {
    # This is the initial parsing of the log
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","nick","irc_username","irc_command","value","additional_info","dcc_file_name","dcc_file_size","dcc_mime_type","fuid"]
      separator => "	"
    }
  }	
}

### BRO KERBEROS ###
filter {
  if "bro_kerberos" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","request_type","client","service","kerberos_success","error_message","email_from","till","cipher","forwardable","renewable","client_certificate_subject","client_certificate_uid","server_certificate_subject","server_certificate_fuid"]
      separator => "	"
    }
  }
}

### BRO NOTICE ###
filter {
  if "bro_notice" in [tags] {
    # This is the initial parsing of the log
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","fuid","file_mime_type","file_description","protocol","note","msg","sub_msg","source_ip","destination_ip","p","n","peer_description","action","suppress_for","dropped","destination_country_code","destination_region","destination_city","destination_latitude","destination_longitude"]
      separator => "	"
    }
  }
}

### BRO RDP ###
filter {
  if "bro_rdp" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","cookie","result","security_protocol","keyboard_layout","client_build","client_name","client_digital_product_id","desktop_width","desktop_height","requested_color_depth","certificate_type","certificate_count","certificate_permanent","encryption_level","encryption_method"]
      separator => "	"
    }
  }
}

### BRO SIGNATURES ###
filter {
  if "bro_signatures" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","note","signature_id","event_message","sub_message","signature_count","host_count"]
      separator => "	"
    }
  }	
}

### BRO SMTP ###
filter {
  if "bro_smtp" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<uid>(.*?))\t(?<source_ip>(.*?))\t(?<source_port>(.*?))\t(?<destination_ip>(.*?))\t(?<destination_port>(.*?))\t(?<trans_depth>(.*?))\t(?<helo>(.*?))\t(?<mail_from>(.*?))\t(?<recipient_to>(.*?))\t(?<mail_date>(.*?))\t(?<from>(.*?))\t(?<to>(.*?))\t(?<cc>(.*?))\t(?<reply_to>(.*?))\t(?<message_id>(.*?))\t(?<in_reply_to>(.*?))\t(?<subject>(.*?))\t(?<x_originating_ip>(.*?))\t(?<first_received>(.*))\t(?<second_received>(.*))\t(?<last_reply>(.*))\t(?<path>(.*))\t(?<useragent>(.*))\t(?<tls>(.*))\t(?<fuids>(.*))\t(?<is_webmail>(.*))" ]
    }
    if [useragent] == "-" {
      mutate {
        remove_field => [ "useragent" ]
      }
    }
  }
}

### BRO SNMP ###
filter {
  if "bro_snmp" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","duration","version","community","get_requests","get_bulk_requests","get_responses","set_responses","display_string","up_since"]
      separator => "	"
    }
  }	
}

### BRO SOFTWARE ###
filter {
  if "bro_software" in [tags] {
    csv {
      columns => ["timestamp","source_ip","source_port","software_type","name","version_major","version_minor","version_minor2","version_minor3","version_additional_info","unparsed_version"]
      separator => "	"
    }
  }	
}

### BRO SSH ###
filter {
  if "bro_ssh" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","version","authentication_success","authentication_attempts","direction","client","server","cipher_algorithm","mac_algorithm","compression_algorithm","kex_algorithm","host_key_algorithm","host_key","destination_country_code","destination_region","destination_city","destination_latitude","destination_longitude"]
      separator => "	"
    }
  }
}
### BRO SSL ###
filter {
  if "bro_ssl" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","version","cipher","curve","server_name","resumed","last_alert","next_protocol","established","certificate_chain_fuids","client_certificate_chain_fuids","certificate_subject","certificate_issuer","client_subject","client_issuer","validation_status","ja3"]
      separator => "	"
    }
    mutate {
      gsub => [ "subject", "\\\\,", "|" ]
    }
    kv {
      include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
      field_split => ","
      source => "certificate_issuer"
    }
    mutate {
      rename => { "CN" => "issuer_common_name"}
      rename => { "C" => "issuer_country_code"}
      rename => { "O" => "issuer_organization"}
      rename => { "OU" => "issuer_organization_unit"}
      rename => { "ST" => "issuer_state"}
      rename => { "SN" => "issuer_surname"}
      rename => { "L" => "issuer_locality"}
      rename => { "DC" => "issuer_distinguished_name"}
      rename => { "GN" => "issuer_given_name"}
      rename => { "pseudonym" => "issuer_pseudonym"}
      rename => { "serialNumber" => "issuer_serial_number"}
      rename => { "title" => "issuer_title"}
      rename => { "initials" => "issuer_initials"}
    }
    kv {
      include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
      field_split => ","
      source => "certificate_subject"
    }
    mutate {
      rename => { "CN" => "certificate_common_name"}
      rename => { "C" => "certificate_country_code"}
      rename => { "O" => "certificate_organization"}
      rename => { "OU" => "certificate_organization_unit"}
      rename => { "ST" => "certificate_state"}
      rename => { "SN" => "certificate_surname"}
      rename => { "L" => "certificate_locality"}
      rename => { "GN" => "certificate_given_name"}
      rename => { "pseudonym" => "certificate_pseudonym"}
      rename => { "serialNumber" => "certificate_serial_number"}
      rename => { "title" => "certificate_title"}
      rename => { "initials" => "certificate_initials"}
    }
    if [certificate_subject] == "-" {
      mutate {
        remove_field => [ "certificate_subject" ]
      }
    }
    if [certificate_issuer] == "-" {
      mutate {
        remove_field => [ "certificate_issuer" ]
      }
    }
    if [certificate_common_name] {
      ruby {
        code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
      }
    }
    if [issuer_common_name] {
      ruby {
        code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
      }
    }
    if [server_name] == "-" {
      mutate {
        remove_field => [ "server_name" ]
      }
    } else {
      ruby {
        code => "event.set('server_name_length', event.get('server_name').length)"
      }
    }
    if [certificate_chain_fuids] == "-" {
      mutate {
        remove_field => [ "certificate_chain_fuids" ]
      }
    } else {
      ruby {
        code => "event.set('certificate_chain_count', event.get('certificate_chain_fuids').count(',') + 1)"
      }
      mutate {
        convert => [ "certificate_chain_length", "integer" ]
      }
    }
    if [client_certificate_chain_fuids] == "-" {
      mutate {
        remove_field => [ "client_certificate_chain_fuids" ]
      }
    }
    if [client_issuer] == "-" {
      mutate {
        remove_field => [ "client_issuer" ]
      }
    }
    if [client_subject] == "-" {
      mutate {
        remove_field => [ "client_subject" ]
      }
    }
    if [curve] == "-" {
      mutate {
        remove_field => [ "curve" ]
      }
    }
    if [issuer] == "-" {
      mutate {
        remove_field => [ "issuer" ]
      }
    }
    if [query] == "-" {
      mutate {
        remove_field => [ "query" ]
      }
    }
    if [subject] == "-" {
      mutate {
        remove_field => [ "subject" ]
      }
    }
    if [validation_status] == "-" {
      mutate {
        remove_field => [ "validation_status" ]
      }
    }
    if [ja3] == "-" {
      mutate {
        remove_field => [ "ja3" ]
      }
    }
  }	
}

### BRO SYSLOG ###
filter {
  if "bro_syslog" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","facility","severity","message"]
      separator => "	"
    }
  }	
}

### BRO TUNNEL ###
filter {
  if "bro_tunnels" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","tunnel_type","action"]
      separator => "	"
    }
  }	
}

### BRO WEIRD ###
filter {
  if "bro_weird" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<uid>(.*?))\t(?<source_ip>(.*?))\t(?<source_port>(.*?))\t(?<destination_ip>(.*?))\t(?<destination_port>(.*?))\t(?<name>(.*?))\t(?<additional_info>(.*?))\t(?<notice>(.*?))\t(?<peer>(.*))" ]
    }
  }
}

### BRO MYSQL ###
filter {
  if "bro_mysql" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<uid>(.*?))\t(?<source_ip>(.*?))\t(?<source_port>(.*?))\t(?<destination_ip>(.*?))\t(?<destination_port>(.*?))\t(?<mysql_command>(.*?))\t(?<mysql_argument>(.*?))\t(?<mysql_success>(.*?))\t(?<rows>(.*?))\t(?<response>(.*))" ]
    }
  }
}

### BRO SOCKS ###
filter {
  if "bro_socks" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","version","user","password","server_status","request_host","request_name","request_port","bound_host","bound_name","bound_port"]
      separator => "    "
    }
  }
}
### BRO X509 ###
filter {
  if "bro_x509" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<id>(.*?))\t(?<certificate_version>(.*?))\t(?<certificate_serial>(.*?))\t(?<certificate_subject>(.*?))\t(?<certificate_issuer>(.*?))\t(?<certificate_not_valid_before>(.*?))\t(?<certificate_not_valid_after>(.*?))\t(?<certificate_key_algorithm>(.*?))\t(?<certificate_signing_algorithm>(.*))\t(?<certificate_key_type>(.*))\t(?<certificate_key_length>(.*))\t(?<certificate_exponent>(.*))\t(?<certificate_curve>(.*))\t(?<san_dns>(.*))\t(?<san_uri>(.*))\t(?<san_email>(.*))\t(?<san_ip>(.*))\t(?<basic_constraints_ca>(.*))\t(?<basic_constraints_path_length>(.*))" ]
    }

    mutate {
      gsub => [ "certificate_issuer", "\\\\,", "|" ]
      gsub => [ "certificate_subject", "\\\\,", "|" ]
    }
	
    kv {
      include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
      field_split => ","
      source => "certificate_issuer"
    }
    mutate {
      rename => { "CN" => "issuer_common_name"}
      rename => { "C" => "issuer_country_code"}
      rename => { "O" => "issuer_organization"}
      rename => { "OU" => "issuer_organization_unit"}
      rename => { "ST" => "issuer_state"}
      rename => { "SN" => "issuer_surname"}
      rename => { "L" => "issuer_locality"}
      rename => { "DC" => "issuer_distinguished_name"}
      rename => { "GN" => "issuer_given_name"}
      rename => { "pseudonym" => "issuer_pseudonym"}
      rename => { "serialNumber" => "issuer_serial_number"}
      rename => { "title" => "issuer_title"}
      rename => { "initials" => "issuer_initials"}
    }
    kv {
      include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
      field_split => ","
      source => "certificate_subject"
    }
    mutate {
      rename => { "CN" => "certificate_common_name"}
      rename => { "C" => "certificate_country_code"}
      rename => { "O" => "certificate_organization"}
      rename => { "OU" => "certificate_organization_unit"}
      rename => { "ST" => "certificate_state"}
      rename => { "SN" => "certificate_surname"}
      rename => { "L" => "certificate_locality"}
      rename => { "GN" => "certificate_given_name"}
      rename => { "pseudonym" => "certificate_pseudonym"}
      rename => { "serialNumber" => "certificate_serial_number"}
      rename => { "title" => "certificate_title"}
      rename => { "initials" => "certificate_initials"}
      convert => [ "certificate_key_length", "integer" ]
      convert => [ "certificate_not_valid_after", "integer" ]
      convert => [ "certificate_not_valid_before", "integer" ]
    }
    if [query] == "-" {
      mutate {
        remove_field => [ "query" ]
      }
    }
    if [san_dns] == "-" {
      mutate {
        remove_field => [ "san_dns" ]
      }
    }
    if [san_email] == "-" {
      mutate {
        remove_field => [ "san_email" ]
      }
    }
    if [san_uri] == "-" {
      mutate {
        remove_field => [ "san_uri" ]
      }
    }
    if [san_ip] == "-" {
      mutate {
        remove_field => [ "san_ip" ]
      }
    }
    if [certificate_common_name] {
      ruby {
        code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
      }
    }
    if [issuer_common_name] {
      ruby {
        code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
      }
    }
    if [certificate_not_valid_after] == "-" {
      mutate {
        remove_field => [ "certificate_not_valid_after" ]
      }
    }
    if [certificate_not_valid_before] == "-" {
      mutate {
        remove_field => [ "certificate_not_valid_before" ]
      }
    }
    if [certificate_not_valid_after] and [certificate_not_valid_before] {
      ruby {
        code => "event.set('certificate_number_days_valid', ((event.get('certificate_not_valid_after') - event.get('certificate_not_valid_before')) / 86400).ceil)"
      }
      date {
        match => [ "certificate_not_valid_after", "UNIX" ]
        target => "certificate_not_valid_after"
      }
      date {
        match => [ "certificate_not_valid_before", "UNIX" ]
        target => "certificate_not_valid_before"
      }
    }
  }
}
### BRO INTEL ###
filter {
  if "bro_intel" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","indicator","indicator_type","seen_where","seen_node","matched","sources","fuid","mimetype","file_description"]
      separator => "	"
    }
  }	
}

### BRO MODBUS ###
filter {
  if "bro_modbus" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","function","exception"]
    separator => "	"
    }
  }
}

### BRO SIP ###
filter {
  if "bro_sip" in [tags] {
    grok {
      match => [ "message", "(?<timestamp>(.*?))\t(?<uid>(.*?))\t(?<source_ip>(.*?))\t(?<source_port>(.*?))\t(?<destination_ip>(.*?))\t(?<destination_port>(.*?))\t(?<trans_depth>(.*?))\t(?<method>(.*?))\t(?<uri>(.*?))\t(?<date>(.*?))\t(?<request_from>(.*?))\t(?<request_to>(.*?))\t(?<response_from>(.*?))\t(?<response_to>(.*?))\t(?<reply_to>(.*?))\t(?<call_id>(.*?))\t(?<seq>(.*?))\t(?<subject>(.*?))\t(?<request_path>(.*?))\t(?<response_path>(.*?))\t(?<user_agent>(.*?))\t(?<status_code>(.*?))\t(?<status_msg>(.*?))\t(?<warning>(.*?))\t(?<request_body_len>(.*?))\t(?<response_body_len>(.*?))\t(?<content_type>(.*?))$" ]
    }
  }
}

### BRO RADIUS ###
filter {
  if "bro_radius" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","radius_username","mac","remote_ip","connect_info","result","logged"]
    separator => "	"
    }
  }
}

### BRO PE ###
filter {
  if "bro_pe" in [tags] {
    csv {
      columns => ["timestamp","fuid","machine","compile_ts","os","subsystem","is_exe","is_64bit","uses_aslr","uses_dep","uses_code_integrity","uses_seh","has_import_table","has_export_table","has_cert_table","has_debug_data","section_names"]
    separator => "	"
    }
  }
}

### BRO RFB ###
filter {
  if "bro_rfb" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","client_major_version","client_minor_version","server_major_version","server_minor_version","authentication_method","auth","share_flag","desktop_name","width","height"]
    separator => "	"
    }
  }
}

### BRO DNP3 ###
filter {
  if "bro_dnp3" in [tags] {
    csv {
    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","fc_request","fc_reply","iin"]
    separator => "	"
    }
  }
}

### BRO SMB FILES ###
filter {
  if "bro_smb_files" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","fuid","action","path","name","size","prev_name","times_modified","times_accessed","times_created","times_changed"]
    separator => "	"
    }
  }
}

### BRO SMB MAPPINGS ###
filter {
  if "bro_smb_mapping" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","path","service","native_file_system","share_type"]
    separator => "	"
    }
  }
}

### BRO NTLM ###
filter {
  if "bro_ntlm" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","ntlm_username","hostname","domain_name","ntlm_success","status"]
    separator => "	"
    }
  }
}

### BRO DCE RPE ###
filter {
  if "bro_dce_rpc" in [tags] {
    csv {
      columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","rtt","named_pipe","endpoint","operation"]
    separator => "	"
    }
  }
}

### START CLEANING UP ALL BRO LOGS ###
filter {
  if "bro" in [tags] {
    if [duration] == "-" {
      mutate {
        replace => [ "duration", "0" ]
      }
    }
    if [original_bytes] == "-" {
      mutate {
        replace => [ "original_bytes", "0" ]
      }
    }
    if [missed_bytes] == "-" {
      mutate {
        replace => [ "missed_bytes", "0" ]
      }
    }
    if [original_ip_bytes] == "-" {
      mutate {
        replace => [ "original_ip_bytes", "0" ]
      }
    }
    if [respond_bytes] == "-" {
      mutate {
        replace => [ "respond_bytes", "0" ]
      }
    }
    if [respond_ip_bytes] == "-" {
      mutate {
        replace => [ "respond_ip_bytes", "0" ]
      }
    }
    if [source_port] == "-" {
      mutate {
        remove_field => ["source_port"]
      }
    }
    if [destination_port] == "-" {
      mutate {
        remove_field => ["destination_port"]
      }
    }
    if [virtual_host] == "-" {
      mutate {
        remove_field => ["virtual_host"]
      }
    }
    mutate {
       rename => [ "connection_uids", "uid" ]
    }
    if [total_bytes] == "-" {
      mutate {
        replace => [ "total_bytes", "0" ]
      }
    }
    if [seen_bytes] == "-" {
      mutate {
        replace => [ "seen_bytes", "0" ]
      }
    }
    if [missing_bytes] == "-" {
      mutate {
        replace => [ "missing_bytes", "0" ]
      }
    }
    if [overflow_bytes] == "-" {
      mutate {
        replace => [ "overflow_bytes", "0" ]
      }
    }
    mutate {
      convert => [ "bound_port", "integer" ]
      convert => [ "data_channel_destination_port", "integer" ]
      convert => [ "destination_port", "integer" ]
      convert => [ "depth", "integer" ]
      convert => [ "duration", "float" ]
      convert => [ "info_code", "integer" ]
      convert => [ "missed_bytes", "integer" ]
      convert => [ "missing_bytes", "integer" ]
      convert => [ "n", "integer" ]
      convert => [ "original_bytes", "integer" ]
      convert => [ "original_packets", "integer" ]
      convert => [ "original_ip_bytes", "integer" ]
      convert => [ "overflow_bytes", "integer" ]
      convert => [ "p", "integer" ]
      convert => [ "query_class", "integer" ]
      convert => [ "query_type", "integer" ]
      convert => [ "rcode", "integer" ]
      convert => [ "request_body_length", "integer" ]
      convert => [ "request_port", "integer" ]
      convert => [ "respond_bytes", "integer" ]
      convert => [ "respond_packets", "integer" ]
      convert => [ "respond_ip_bytes", "integer" ]
      convert => [ "response_body_length", "integer" ]
      convert => [ "seen_bytes", "integer" ]
      convert => [ "source_port", "integer" ]
      convert => [ "status_code", "integer" ]
      convert => [ "suppress_for", "float" ]
      convert => [ "total_bytes", "integer" ]
      convert => [ "trans_depth", "integer" ]
      convert => [ "transaction_id", "integer" ]
      lowercase => [ "query" ]
    }
    if [original_bytes] {
      if [respond_bytes] {
        ruby {
          code => "event.set('total_bytes', event.get('original_bytes') + event.get('respond_bytes'))"
        }
      }
    }
  }
}
### ADD SOME GEOIP ###
filter {
  if [source_ip] {
    if [source_ip] == "-" {
      mutate {
        replace => { "source_ip" => "0.0.0.0" }
      }
    }
    if [source_ip] =~ "10\." or [source_ip] =~ "192\.168\." or [source_ip] =~ "172\.(1[6-9]|2[0-9]|3[0-1])\." or [source_ip] =~ "fe80::20c:29ff:fe19:f7d" or [source_ip] =~ "::1" {
	mutate {
	}
      } else {
        geoip {
          source => "[source_ip]"
          target => "source_geo"
        }
      }
    if [source_ip] {
      mutate {
        add_field => { "ips" => "%{source_ip}" }
        add_field => { "source_ips" => [ "%{source_ip}" ] }
      }
    }
  }
  if [destination_ip] {
    if [destination_ip] == "-" {
      mutate {
        replace => { "destination_ip" => "0.0.0.0" }
      }
    }
    if [destination_ip] =~ "10\." or [destination_ip] =~ "192\.168\." or [destination_ip] =~ "172\.(1[6-9]|2[0-9]|3[0-1])\." or [destination_ip] =~ "239.255.255.250" or [destination_ip] =~ "224\.0\.0\." or [destination_ip] =~ "255.255.255.255" or [destination_ip] =~ "ff02::fb" or [destination_ip] =~ "fe80::20c:29ff:fe19:f7d" or [destination_ip] =~ "224\.0\.1\." {
      mutate {
      }
    }
    else {
      geoip {
      source => "[destination_ip]"
      target => "destination_geo"
      }
    }
  }
  if [destination_ip] {
    mutate {
      add_field => { "ips" => "%{destination_ip}" }
      add_field => { "destination_ips" => [ "%{destination_ip}" ] }
    }
  }
}
### BRO DNS MAGIC ###
filter {
  if "bro_dns" or "dns" in [tags] {
    if [query] =~ "^whois\." {
      drop { }
    }
    # REPLACE test.int with your internal domain
    if [query] and [query] !~ "\.site\.lan$" {
      mutate {
        lowercase => [ "query" ]
      }
      if [query_type_name] != "NB" and [query_type_name] != "TKEY" and [query_type_name] != "NBSTAT" and [query_type_name] != "PTR" {
        tld {
          source => "query"
        }
        ruby {
          code => "event.set('query_length', event.get('query').length)"
        }
        mutate {
          rename => { "[SubLog][sessionid]" => "sub_session_id" }
          rename => { "[tld][domain]" => "highest_registered_domain" }
          rename => { "[tld][trd]" => "subdomain" }
          rename => { "[tld][tld]" => "top_level_domain" }
          rename => { "[tld][sld]" => "parent_domain" }
        }
        if [parent_domain] {
          ruby {
            code => "event.set('parent_domain_length', event.get('parent_domain').length)"
          }
        }
        if [subdomain] {
          ruby {
            code => "event.set('subdomain_length', event.get('subdomain').length)"
          }
        }
      }
    }
  }
}

### BRO HTTP MAGIC ###
filter {
  if "bro_http" in tags {
    if [uri] {
      ruby {
        code => "event.set('uri_length', event.get('uri').length)"
      }
    }
    if [virtual_host] {
      ruby {
        code => "event.set('virtual_host_length', event.get('virtual_host').length)"
      }
    }
    if [useragent] {
      ruby {
        code => "event.set('useragent_length', event.get('useragent').length)"
      }
    }
  }
}
